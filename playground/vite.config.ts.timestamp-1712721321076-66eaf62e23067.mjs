// vite.config.ts
import { defineConfig } from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/vite@5.2.8_@types+node@20.12.7/node_modules/vite/dist/node/index.js";
import Inspect from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/vite-plugin-inspect@0.8.3_@nuxt+kit@3.11.2_rollup@4.14.1_vite@5.2.8/node_modules/vite-plugin-inspect/dist/index.mjs";

// ../src/vite.ts
import { createVitePlugin } from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/unplugin@1.10.1/node_modules/unplugin/dist/index.mjs";

// ../src/index.ts
import { promises as fs2 } from "node:fs";
import process3 from "node:process";
import { createUnplugin } from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/unplugin@1.10.1/node_modules/unplugin/dist/index.mjs";

// ../src/core/generate.ts
import path, { resolve } from "node:path";
import { promises as fs } from "node:fs";
import process from "node:process";
import fg from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/index.js";
import { loadFile } from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/magicast@0.3.3/node_modules/magicast/dist/index.mjs";
import { deepMerge } from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/@antfu+utils@0.7.7/node_modules/@antfu/utils/dist/index.mjs";
async function generateScript(options, mode) {
  const { dir, fileName, globalName, serve, build } = options.env;
  const folder = await findFolder(process.cwd(), dir || "");
  const files = await fg("*.+(js|ts)", {
    absolute: true,
    cwd: folder
  });
  const testReg = mode === "serve" ? serve : build;
  let target = {};
  const source = [];
  let code = "";
  const name = fileName || "";
  for (const file of files) {
    try {
      const mod = await loadFile(file);
      if (testReg?.test(file))
        target = mod.exports.default;
      else
        source.push(mod.exports.default);
    } catch (error) {
      console.error(`Error loading file ${file}:`, error);
    }
  }
  const returnedTarget = deepMerge({}, source, target);
  const versionInfo = await generateVersion(options, mode);
  code = `window.${globalName}=${JSON.stringify(returnedTarget)};${versionInfo}`;
  const formatCode = code;
  return {
    code,
    script: `  <script type="text/javascript" src="${fileName}"></script>
</head>`,
    emit: {
      type: "asset",
      fileName: name,
      source: formatCode
    },
    watchFolder: folder
  };
}
async function generateVersion(options, mode) {
  const packageFile = await fg("package.json", {
    absolute: true,
    cwd: resolve(process.cwd())
  });
  const packageString = await fs.readFile(packageFile[0], "utf8");
  const packageJson = JSON.parse(packageString);
  return `console.info("Version: ${packageJson.version} -  ${mode === "serve" ? "runtime" : "built"} on ${options.date}")`;
}
async function findFolder(directoryPath, dir) {
  const ignore = /* @__PURE__ */ new Set(["dist", "node_modules", "playground", "example", "test", "jest", "tests", "locales", "public", ".git", ".github", ".vscode"]);
  const files = await fs.readdir(directoryPath);
  const filePaths = files.filter((item) => !ignore.has(item));
  let nestedFolder = "";
  for (const file of filePaths) {
    const fullFilePath = path.join(directoryPath, file);
    const stat = await fs.stat(fullFilePath);
    if (stat.isDirectory()) {
      if (file.toLowerCase() === dir) {
        return fullFilePath;
      } else {
        nestedFolder = await findFolder(fullFilePath, dir);
        if (nestedFolder)
          return nestedFolder;
      }
    }
  }
  return "";
}

// ../src/core/options.ts
import { deepMerge as deepMerge2 } from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/@antfu+utils@0.7.7/node_modules/@antfu/utils/dist/index.mjs";
async function resolveOptions(options) {
  const defaults = {
    env: {
      dir: "config",
      fileName: "manifest.js",
      globalName: "manifest",
      serve: /dev|development/i,
      build: /prod|production/i
    }
  };
  const mergeOptions = deepMerge2(defaults, options);
  return {
    ...mergeOptions,
    date: (/* @__PURE__ */ new Date()).toString()
  };
}

// ../src/core/compress.ts
import process2 from "node:process";
import * as compressing from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/compressing@1.10.0/node_modules/compressing/index.js";

// ../src/core/log.ts
import chalk from "file:///Users/dengriguang/Documents/My/unplugin-env/node_modules/.pnpm/chalk@5.3.0/node_modules/chalk/source/index.js";
var log = console.log;
var Log = class {
  static log(key, msg) {
    log(chalk.bold(`${key}: ${msg}`));
  }
  static error(key, msg) {
    log(chalk.bold.red(`${key}: ${msg}`));
  }
  static success(key, msg) {
    log(chalk.bold.green(`${key}: ${msg}`));
  }
};

// ../src/core/compress.ts
async function createCompress(options) {
  Log.log("Compressing the directory", options);
  try {
    await compressing.zip.compressDir("./dist", "./dist.zip");
    Log.success("Successfully compressed the directory", options);
    process2.exit(0);
  } catch (error) {
    Log.error("Error compressing the directory", error);
    throw error;
  }
}

// ../src/index.ts
var virtualEnvId = "virtual:env";
var resolvedVirtualEnvId = `\0${virtualEnvId}`;
var unpluginFactory = (options = {}) => {
  const resolved = resolveOptions(options);
  return [{
    name: "plugin-env-serve",
    apply: "serve",
    enforce: "post",
    async resolveId(id) {
      if (id.startsWith(virtualEnvId))
        return resolvedVirtualEnvId;
    },
    async load(id) {
      if (id.startsWith(resolvedVirtualEnvId)) {
        const config = await resolved;
        const { code } = await generateScript(config, "serve");
        return code;
      }
    }
  }, {
    name: "unplugin-env-build",
    apply: "build",
    enforce: "post",
    resolveId(id) {
      if (id.startsWith(virtualEnvId))
        return resolvedVirtualEnvId;
    },
    async load(id) {
      const config = await resolved;
      const { emit, script } = await generateScript(config, "build");
      if (id.startsWith(resolvedVirtualEnvId)) {
        this.emitFile(emit);
        return "";
      }
      if (id.endsWith(".html")) {
        let code = await fs2.readFile(id, "utf8");
        code = code.replace(/<\/head>/gm, script);
        return {
          code
        };
      }
      return null;
    },
    buildEnd: () => {
      process3.on("beforeExit", async () => {
        await createCompress({});
      });
    }
  }];
};

// ../src/vite.ts
var vite_default = createVitePlugin(unpluginFactory);

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [
    Inspect(),
    vite_default()
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
